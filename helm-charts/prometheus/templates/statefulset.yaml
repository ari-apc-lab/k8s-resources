apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "prometheus.fullname" . }}
  labels:
    {{- include "prometheus.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "prometheus.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "prometheus.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "prometheus.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "prometheus.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --web.enable-lifecycle
            - --config.file=/etc/prometheus/prometheus.yml
          volumeMounts:
            - name: {{ include "prometheus.fullname" . }}-config
              mountPath: /etc/prometheus/
            - name: {{ include "prometheus.fullname" . }}-storage
              mountPath: /prometheus/
            - name: {{ include "prometheus.fullname" . }}-rules
              mountPath: /etc/prometheus/rules/
              subPath: rules
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.service.targetPort }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
            successThreshold: 1
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.service.targetPort }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
      volumes:
        - name: {{ include "prometheus.fullname" . }}-config
          configMap:
            name: {{ include "prometheus.fullname" . }}
            items:
              - key: prometheus.yml
                path: prometheus.yml
        - name: {{ include "prometheus.fullname" . }}-rules
          persistentVolumeClaim:
            claimName: {{ include "prometheus.fullname" . }}-rules
            readOnly: true
  volumeClaimTemplates:
    - metadata:
        name: {{ include "prometheus.fullname" . }}-storage
      spec:
        accessModes: [ ReadWriteOnce ]
        resources:
          requests:
            storage: {{ .Values.config.storage.storage | quote }}